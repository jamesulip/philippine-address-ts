{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios from 'axios';\n\ninterface Region {\n    id: string;\n    name: string;\n}\n\ninterface Province {\n    id: string;\n    name: string;\n    region_id: string;\n}\n\ninterface Municipality {\n    id: string;\n    name: string;\n    province_id: string;\n}\n\nexport function useAddress() {\n    let regions: Region[] = [];\n    let provinces: Province[] = [];\n    let municipalities: Municipality[] = [];\n\n    async function initializeRegions(): Promise<Region[]> {\n        if (regions.length === 0) {\n            const { data } = await axios.get<Region[]>('http://localhost:8200/json/regions.json');\n            regions = data;\n            return data;\n        }\n        return regions;\n    }\n\n    async function initializeProvinces(): Promise<Province[]> {\n        if (provinces.length === 0) {\n            const { data } = await axios.get<Province[]>('http://localhost:8200/json/provinces.json');\n            provinces = data;\n            return data;\n        }\n        return provinces;\n    }\n\n    async function initializeMunicipalities(): Promise<Municipality[]> {\n        if (municipalities.length === 0) {\n            const { data } = await axios.get<Municipality[]>('http://localhost:8200/json/municipalities.json');\n            municipalities = data;\n            return data;\n        }\n        return municipalities;\n    }\n\n    async function getRegions(): Promise<Region[]> {\n        return await initializeRegions();\n    }\n\n    async function getProvinces(): Promise<Province[]> {\n        return await initializeProvinces();\n    }\n\n    async function getMunicipalities(): Promise<Municipality[]> {\n        return await initializeMunicipalities();\n    }\n\n    async function findRegion(regionId: string | number): Promise<Region | undefined> {\n        const regions = await getRegions();\n        return regions.find(region => region.id === regionId);\n    }\n\n    async function findProvince(provinceId: string | number): Promise<Province | undefined> {\n        const provinces = await getProvinces();\n        return provinces.find(province => province.id === provinceId);\n    }\n\n    async function findMunicipality(municipalityId: string | number): Promise<Municipality | undefined> {\n        const municipalities = await getMunicipalities();\n        return municipalities.find(municipality => municipality.id === municipalityId);\n    }\n\n    async function searchRegions(query: string): Promise<Region[]> {\n        const regions = await getRegions();\n        return regions.filter(region => region.name.toLowerCase().includes(query.toLowerCase()));\n    }\n\n    async function searchProvinces(query: string): Promise<Province[]> {\n        const provinces = await getProvinces();\n        return provinces.filter(province => province.name.toLowerCase().includes(query.toLowerCase()));\n    }\n\n    async function searchMunicipalities(query: string): Promise<Municipality[]> {\n        const municipalities = await getMunicipalities();\n        return municipalities.filter(municipality => municipality.name.toLowerCase().includes(query.toLowerCase()));\n    }\n\n    async function getRegionByProvinceId(provinceId: string | number): Promise<Region | undefined> {\n        const province = await findProvince(provinceId);\n        return province ? findRegion(province.region_id) : undefined;\n    }\n\n    async function getRegionByMunicipalityId(municipalityId: string | number): Promise<Region | undefined> {\n        const municipality = await findMunicipality(municipalityId);\n        if (municipality) {\n            const province = await findProvince(municipality.province_id);\n            return province ? findRegion(province.region_id) : undefined;\n        }\n        return undefined;\n    }\n\n    async function getProvinceByMunicipalityId(municipalityId: string | number): Promise<Province | undefined> {\n        const municipality = await findMunicipality(municipalityId);\n        return municipality ? findProvince(municipality.province_id) : undefined;\n    }\n\n    async function getRegionProvinces(regionId: string | number): Promise<Province[]> {\n        const provinces = await getProvinces();\n        return provinces.filter(province => province.region_id === regionId);\n    }\n\n    async function getProvinceMunicipalities(provinceId: string | number): Promise<Municipality[]> {\n        const municipalities = await getMunicipalities();\n        return municipalities.filter(municipality => municipality.province_id === provinceId);\n    }\n\n    return {\n        getRegions,\n        getProvinces,\n        getMunicipalities,\n        findRegion,\n        findProvince,\n        findMunicipality,\n        searchRegions,\n        searchProvinces,\n        searchMunicipalities,\n        getRegionByProvinceId,\n        getRegionByMunicipalityId,\n        getProvinceByMunicipalityId,\n        getRegionProvinces,\n        getProvinceMunicipalities,\n    };\n}\n"],"mappings":"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","names":["regions","provinces","municipalities"]}